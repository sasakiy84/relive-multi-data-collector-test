// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: channels.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrCreateChannelById = `-- name: GetOrCreateChannelById :one
WITH inserted_channel AS (
    INSERT INTO channels (
        youtube_channel_id,
        name
    ) VALUES (
        $1,
        $2
    )
    ON CONFLICT (youtube_channel_id) DO NOTHING
    RETURNING
        youtube_channel_id, name, created_at, updated_at, true AS created
)
SELECT
    youtube_channel_id, name, created_at, updated_at, created
FROM
    inserted_channel
UNION ALL
(SELECT
    youtube_channel_id, name, created_at, updated_at, false AS created
FROM
    channels
WHERE
    youtube_channel_id = $1)
LIMIT
    1
`

type GetOrCreateChannelByIdParams struct {
	YoutubeChannelID string `json:"youtube_channel_id"`
	Name             string `json:"name"`
}

type GetOrCreateChannelByIdRow struct {
	YoutubeChannelID string             `json:"youtube_channel_id"`
	Name             string             `json:"name"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	Created          bool               `json:"created"`
}

func (q *Queries) GetOrCreateChannelById(ctx context.Context, arg GetOrCreateChannelByIdParams) (GetOrCreateChannelByIdRow, error) {
	row := q.db.QueryRow(ctx, getOrCreateChannelById, arg.YoutubeChannelID, arg.Name)
	var i GetOrCreateChannelByIdRow
	err := row.Scan(
		&i.YoutubeChannelID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Created,
	)
	return i, err
}
