// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ThumbnailType string

const (
	ThumbnailTypeDefault  ThumbnailType = "default"
	ThumbnailTypeMedium   ThumbnailType = "medium"
	ThumbnailTypeHigh     ThumbnailType = "high"
	ThumbnailTypeStandard ThumbnailType = "standard"
	ThumbnailTypeMaxres   ThumbnailType = "maxres"
)

func (e *ThumbnailType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ThumbnailType(s)
	case string:
		*e = ThumbnailType(s)
	default:
		return fmt.Errorf("unsupported scan type for ThumbnailType: %T", src)
	}
	return nil
}

type NullThumbnailType struct {
	ThumbnailType ThumbnailType `json:"thumbnail_type"`
	Valid         bool          `json:"valid"` // Valid is true if ThumbnailType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullThumbnailType) Scan(value interface{}) error {
	if value == nil {
		ns.ThumbnailType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ThumbnailType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullThumbnailType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ThumbnailType), nil
}

type Channel struct {
	YoutubeChannelID string             `json:"youtube_channel_id"`
	Name             string             `json:"name"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type Event struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type EventKeyword struct {
	EventID   pgtype.UUID        `json:"event_id"`
	KeywordID pgtype.UUID        `json:"keyword_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Keyword struct {
	ID        pgtype.UUID        `json:"id"`
	Word      string             `json:"word"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Thumbnail struct {
	Url            string        `json:"url"`
	Type           ThumbnailType `json:"type"`
	Width          int32         `json:"width"`
	Height         int32         `json:"height"`
	YoutubeVideoID string        `json:"youtube_video_id"`
}

type Video struct {
	YoutubeVideoID   string             `json:"youtube_video_id"`
	Title            string             `json:"title"`
	ActualEndTime    pgtype.Timestamptz `json:"actual_end_time"`
	ActualStartTime  pgtype.Timestamptz `json:"actual_start_time"`
	ViewCount        int64              `json:"view_count"`
	LikeCount        int64              `json:"like_count"`
	DurationSecond   int32              `json:"duration_second"`
	YoutubeChannelID string             `json:"youtube_channel_id"`
	EventID          pgtype.UUID        `json:"event_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}
